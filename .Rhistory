}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
host <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", client@jobId))
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setClass(
"SuperQueryClient",
slots = list(
hostname = "character",
port = "numeric",
username = "character",
password = "character",
jobId = "character",
conn = "MySQLConnection",
result = "SuperQueryResult"
),
prototype=list(
hostname = "bi.superquery.io",
port = 3306,
username = Sys.getenv("SUPERQUERY_USERNAME"),
password = Sys.getenv("SUPERQUERY_PASSWORD")
),
)
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setClass(
"SuperQueryResult",
slots = list(
result = "data.frame",
stats = "data.frame"
)
)
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setClass(
"SuperQueryResult",
contains = "data.frame"
slots = list(
result = "data.frame",
stats = "data.frame"
)
)\
setClass(
"SuperQueryResult",
contains = "data.frame"
slots = list(
result = "data.frame",
stats = "data.frame"
)
)
setClass(
"SuperQueryResult",
contains = "data.frame"
slots = list(
result = "data.frame",
stats = "data.frame"
)
)setClass(
"SuperQueryResult",
contains = "data.frame"
slots = list(
result = "data.frame",
stats = "data.frame"
)
)
setClass(
"SuperQueryResult",
contains = "data.frame"
slots = list(
result = "data.frame",
stats = "data.frame"
)
)
setClass(
"SuperQueryResult",
contains = "data.frame",
slots = list(
result = "data.frame",
stats = "data.frame"
)
)
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
dbDisconnect(con)
dbDisconnect(con)
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
res.result
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
res@result
res@stats
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
dbClearResult(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbClearResult(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
res@result
View(con)
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
print("Connecting")
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
print("Connected!")
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
summary(queryResult)
dbClearResult(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbClearResult(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
print("Connecting...")
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
print("Connected!")
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
print("Query: ", paste);
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
sum <- summary(queryResult)
print(sum)
dbClearResult(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbClearResult(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
print("Connecting...")
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
print("Connected!")
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
print("Query: ", sql);
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
sum <- summary(queryResult)
print(sum)
dbClearResult(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbClearResult(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
dbDisconnect(client@conn)
dbDisconnect(conn)
dbDisconnect(con)
View(x)
dbDisconnect()
dbDisconnect(con)
dbDisconnect(conn)
dbDisconnect(con1)
dbDisconnect(con2)
client <- new("SuperQueryClient")
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
setGeneric(name="query",
def=function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL)
{
standardGeneric("query")
}
)
setMethod("query", "SuperQueryClient",function(client,
sql = NULL,
jobId = NULL,
host = NULL,
port = 3306,
username = NULL,
password = NULL) {
if (is.null(username) || !is.character(username)){
if (!is.null(client@username) && is.character(client@username)){
username <- client@username
}else{
stop("Argument username must be a string")
}
}
if (is.null(password) || !is.character(password)){
if (!is.null(client@password) && is.character(client@password)){
password <- client@password
}else{
stop("Argument password must be a string")
}
}
if (is.null(host) || !is.character(host)){
if (!is.null(client@host) && is.character(client@host)){
host <- client@host
}else{
stop("Argument host must be a string")
}
}
if (is.null(jobId) || !is.character(jobId)){
if (!is.null(client@jobId) && is.character(client@jobId)){
jobId <- client@jobId
}else{
stop("Argument jobId must be a string")
}
}
print("Connecting...")
client@conn <- dbConnect(RMySQL::MySQL(),
host=host,
port=port,
username=username,
password=password)
print("Connected!")
proj <- dbSendQuery(client@conn, paste("SET super_clientJobId =", jobId))
print("Query: ", sql);
query <- dbSendQuery(client@conn, sql)
queryResult <- dbFetch(query)
sum <- summary(queryResult)
print(sum)
dbClearResult(query)
stats <- dbSendQuery(client@conn, "explain")
queryStats <- dbFetch(stats)
dbClearResult(stats)
dbDisconnect(client@conn)
new("SuperQueryResult", queryResult, queryStats)
})
res <- query(client,host="proxy-dev.superquery.io",username = "r1gNkaOG7",password = "BJxe4yTuzQ", jobId = "corrieABC",sql="SELECT DISTINCT userId FROM `mydata-1470162410749.EVALUEX_DEV.superQueryAudit` WHERE _PARTITIONTIME >= '2019-10-20'" )
conn <- dbConnect(RMySQL::MySQL(),
host="proxy-dev.superquery.io",
port=3306,
username="r1gNkaOG7",
password="BJxe4yTuzQ")
